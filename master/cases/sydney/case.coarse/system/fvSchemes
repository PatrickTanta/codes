/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default        Euler;; 
}

gradSchemes
{
    default         none;
    
    //pEqn.H, velocity correction in PISO.
    grad(pd)         Gauss linear;
    
    // viscou tensor
    grad(U)			Gauss linear;
}

divSchemes
{
    default         none;
    div(phi,rho)    Gauss upwind;
    div(phi,U)      Gauss upwind;
    div(phi,k)      Gauss upwind;
    div(phi,epsilon) Gauss upwind;
    div(phi,Yi_h)   Gauss upwind; // divergence scheme for Yi and hs
    div((muEff*dev2(grad(U).T()))) Gauss linear;
}

laplacianSchemes
{
    default         none;
    
    //UEq.H
    laplacian(muEff,U) Gauss linear uncorrected;
    
    //YEq.H
    laplacian(muEff,aC3H6O) Gauss linear uncorrected;
    laplacian(muEff,N2) Gauss linear uncorrected;
    laplacian(muEff,O2) Gauss linear uncorrected;
    laplacian(muEff,CO2) Gauss linear uncorrected;
    laplacian(muEff,H2O) Gauss linear uncorrected;
    
    //hsEq.H
    laplacian(alphaEff,hs) Gauss linear uncorrected;
    
    //pEq.H
    laplacian((rho*(1|A(U))),pd) Gauss linear uncorrected;
    
    //epsEq <kEpsilon.C>
    laplacian(DepsilonEff,epsilon) Gauss linear uncorrected;
    
    //kEq <kEpsilon.C>
    laplacian(DkEff,k) Gauss linear uncorrected;
}

interpolationSchemes
{
    default         linear;
    interpolate(HbyA) linear;
}

snGradSchemes
{
    default         uncorrected;
}

fluxRequired
{
    default         no;
    p;
    pd;
}


// ************************************************************************* //
